!function(e){function t(r){if(s[r])return s[r].exports;var n=s[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var s={};t.m=e,t.c=s,t.d=function(e,s,r){t.o(e,s)||Object.defineProperty(e,s,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(s,"a",s),s},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,s){var r,n,u,i;i=s(1),u=function(){function e(){return["ui.router","ui.bootstrap","ngAnimate","guanlecoja.ui","bbData"]}return e}(),n=function(){function e(e,t,s){var r,n,u,a,l,o,p,c;for(p=s.plugins.pullrequests,u=n=0,a=p.length;n<a;u=++n)o=p[u],l=o.name+"_pullrequests",t.addGroup({name:l,caption:o.caption,icon:o.icon,order:2+u}),r={group:l,caption:o.caption,name:o.name},c={controller:"pullrequestsController",controllerAs:"c",template:i,name:l,url:"/"+l,data:r},e.state(c)}return e}(),r=function(){function e(e,t,s,r,n){var u,i,a;this.requests=void 0,this.builders=n.open().closeOnDestroy(e).getBuilders(),i=t.current.data.name,u=function(){return r.get("/pullrequests/api/"+i).then(this.parseRequests.bind(this))}.bind(this),this.builders.onChange=u,a=s(u,1e4),e.$on("$destroy",function(){return s.cancel(a)})}return e.prototype.getPullrequests=function(){var e;return e=this,this.$http.get("/pullrequests/api/"+this.name).then(function(t){return e.parseRequests(t)})},e.prototype.parseRequests=function(e){var t,s,r,n,u,i,a,l,o,p,c,d,h;for(c=[],l=e.data,i=0,a=l.length;i<a;i++){p=l[i],r=[],o=p.builds;for(t in o)s=o[t],d=s[0],u=s[1],h=s[2],s={},s.url=null===u?"/#/buildrequests/"+d:"#/builders/"+t+"/builds/"+u,h=this.statusName(h),n="results_"+h,"PENDING"===h&&(n+=" pulse"),s.status=h,s.class=n,s.name=this.builders.get(t).name,r.push(s);null===p.assignee&&(p.assignee="None"),p.builds=r,c.push(p)}if(void 0===this.requests||!this.objCMP(c,this.requests))return console.log("something change here buddy"),this.requests=c},e.prototype.objCMP=function(e,t){var s,r,n,u;if(e.length!==t.length)return!1;for(s in e)if(n=e[s],"$$hashKey"!==s){if(u=t[s],r=typeof u,typeof n!==r)return!1;if("object"!==r){if(n!==u)return!1}else if(!this.objCMP(u,n))return!1}return!0},e.prototype.statusName=function(e){var t;return t=["UNKNOWN","PENDING","SUCCESS","WARNINGS","FAILURE","SKIPPED","EXCEPTION","RETRY","CANCELLED"],t[e]},e}(),angular.module("pullrequests",new u).config(["$stateProvider","glMenuServiceProvider","config",n]).controller("pullrequestsController",["$scope","$state","$interval","$http","dataService",r])},function(e,t){e.exports='<div class="pullrequests"><div ng-hide="c.requests" class="load-indicator"><div class="spinner"><i class="fa fa-circle-o-notch fa-spin fa-2x"></i><p>loading</p></div></div><div ng-show="c.requests.length==0"><p>no pullrequests exists</p></div><table ng-show="c.requests &amp;&amp; c.requests.length &gt; 0" class="table table-striped table-bordered"><tr class="first-row"><th class="pid">id</th><th>Title</th><th>Recent Builds</th><th>Author</th></tr><tr ng-repeat="request in c.requests"><td class="pid"><a href="{{request.url}}" target="_blank">{{request.id}}</a><div>{{request.base_branch}}</div></td><td class="title"><a href="{{request.url}}" target="_blank">{{request.title}}</a></td><td class="builds"><span ng-repeat="build in request.builds"><a href="{{build.url}}"><span class="badge-status {{build.class}}">{{build.name}}</span></a></span></td><td><span>{{request.author}}</span><span>&nbsp;/&nbsp;</span><span>{{request.assignee}}</span></td></tr></table></div>'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,